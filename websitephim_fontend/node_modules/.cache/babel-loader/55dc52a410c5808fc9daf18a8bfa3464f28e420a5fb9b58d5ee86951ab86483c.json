{"ast":null,"code":"// import React, { useEffect, useState } from 'react';\n// import axios from 'axios'\n// import Table from '@mui/material/Table';\n// import TableBody from '@mui/material/TableBody';\n// import TableCell from '@mui/material/TableCell';\n// import TableContainer from '@mui/material/TableContainer';\n// import TableHead from '@mui/material/TableHead';\n// import TableRow from '@mui/material/TableRow';\n// import { Paper, IconButton, Dialog, DialogTitle, DialogContent, DialogActions, Button } from '@mui/material';\n// import DeleteIcon from '@mui/icons-material/Delete';\n// import EditIcon from '@mui/icons-material/Edit'\n// import TextField from '@mui/material/TextField';\n// import TablePagination from '@mui/material/TablePagination';\n// import Box from '@mui/material/Box';\n// import Tab from '@mui/material/Tab';\n// import TabContext from '@mui/lab/TabContext';\n// import TabList from '@mui/lab/TabList';\n// import TabPanel from '@mui/lab/TabPanel';\n// import { styled } from '@mui/system';\n// import Grid from '@mui/material/Grid';\n// import Autocomplete from '@mui/material/Autocomplete';\n// import Checkbox from '@mui/material/Checkbox';\n// import CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';\n// import CheckBoxIcon from '@mui/icons-material/CheckBox';\n// import { TextareaAutosize as BaseTextareaAutosize } from '@mui/base/TextareaAutosize';\n// import AddCircleIcon from '@mui/icons-material/AddCircle';\n// const icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\n// const checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\n\n// function TableMovie() {\n//     const [movies, setMovie] = useState(null)\n//     const [moviesle, setMovieLe] = useState(null)\n//     const [moviesbo, setMovieBo] = useState(null)\n//     const [moviesChieuRap, setMovieChieuRap] = useState(null)\n\n//     const [deleteId, setDeleteId] = useState(null)\n//     const [confirmOpen, setConfirmOpen] = useState(false)\n//     const [openEdit1, setOpenEdit1] = useState(false)\n//     const [openEdit2, setOpenEdit2] = useState(false)\n//     const [openAdd, setOpenAdd] = useState(false)\n\n//     const [page, setPage] = React.useState(0);\n//     const [rowsPerPage, setRowsPerPage] = React.useState(5);\n//     const [newMovie, setNewMovie] = useState({})\n//     const [selectedImage, setSelectedImage] = useState(null); // Lưu file chưa upload\n//     const [imagePreview, setImagePreview] = useState(\"\");\n//     const [types, setType] = useState(null)\n//     const [nations, setNation] = useState(null)\n//     const [styles, setStyle] = useState(null)\n//     const [selectedStyle, setSelectedStyle] = useState([]);\n\n//     const [selectedType, setSelectedType] = useState([]);\n//     const [selectedNation, setSelectedNation] = useState([])\n//         ;\n//     const handleImageChange = (event) => {\n//         const file = event.target.files[0];\n//         if (file) {\n//             const reader = new FileReader();\n//             reader.onloadend = () => {\n//                 setImagePreview(reader.result);\n//                 setSelectedImage(reader.result);\n//             };\n//             reader.readAsDataURL(file);\n//         }\n//     };\n//     // const handleDeleteImage = () => {\n//     //     setImagePreview(\"\");\n//     //     setSelectedImage(null);\n//     // };\n\n//     // const [snackbarOpen, setSnackbarOpen] = useState(false)\n\n//     const [value, setValue] = React.useState('1');\n\n//     const handleChangeTab = (event, newValue) => {\n//         setValue(newValue);\n//     };\n\n//     const handleChangePage = (event, newPage) => {\n//         setPage(newPage);\n//     };\n\n//     const handleChangeRowsPerPage = (event) => {\n//         setRowsPerPage(parseInt(event.target.value, 10));\n//         setPage(0);\n//     };\n\n//     const [editMovie, setEditMovie] = useState({})\n\n//     // const handleClickOpenEdit = (movie) => {\n//     //     setEditMovie(movie)\n//     //     console.log(editMovie.type)\n//     //     console.log(editMovie.name)\n\n//     //     setOpenEdit(true)\n//     // }\n//     useEffect(() => {\n//         axios.get('http://localhost:8080/website/typeAll')\n//             .then(response => {\n//                 setType(response.data);\n//             })\n//             .catch(error => console.error(error));\n//     }, []);\n//     useEffect(() => {\n//         axios.get('http://localhost:8080/website/nationAll')\n//             .then(response => {\n//                 setNation(response.data);\n//             })\n//             .catch(error => console.error(error));\n//     }, []);\n//     const handleClickOpenEdit1 = (movie) => {\n//         setEditMovie(movie);\n\n//         // Lấy danh sách type của movie và hiển thị lên Autocomplete\n//         setSelectedType(movie.types || []);\n//         // Cập nhật giá trị nation\n//         setSelectedNation(movie.nation || []);\n//         setSelectedStyle(movie.style || []);\n//         console.log(movie.status)\n//         setEditMovie((prev) => ({ ...prev, status: movie.status }));\n//         console.log(\"Description value:\", movie.description);\n\n//         setOpenEdit1(true);\n//     };\n//     const handleClickOpenEdit2 = (movie) => {\n//         setEditMovie(movie);\n\n//         // Lấy danh sách type của movie và hiển thị lên Autocomplete\n//         setSelectedType(movie.types || []);\n//         // Cập nhật giá trị nation\n//         setSelectedNation(movie.nation || []);\n//         setSelectedStyle(movie.style || []);\n//         console.log(movie.status)\n//         setEditMovie((prev) => ({ ...prev, status: movie.status }));\n//         console.log(\"Description value:\", movie.description);\n\n//         setOpenEdit2(true);\n//     };\n\n//     const handleClickOpenAdd = (movie) => {\n//         setEditMovie(movie);\n//         setOpenAdd(true);\n//     };\n\n//     const handleConfirmOpen = (id) => {\n//         setDeleteId(id)\n//         setConfirmOpen(true)\n//     }\n//     const handleConfirmClose = (id) => {\n//         setDeleteId(null)\n//         setConfirmOpen(false)\n//     }\n\n//     const handleCloseEdit1 = () => {\n//         setOpenEdit1(false)\n//     }\n//     const handleCloseEdit2 = () => {\n//         setOpenEdit2(false)\n//     }\n//     const handleCloseAdd = () => {\n//         setOpenAdd(false)\n//     }\n\n//     const handleChangeEdit = (event) => {\n//         setEditMovie({\n//             ...editMovie,\n//             [event.target.name]: event.target.value\n//         });\n//     };\n\n//     // delete\n//     const handleDelete = async (id) => {\n//         try {\n//             await axios.delete(`http://localhost:8080/website/movie/${id}`);\n//             setMovie(moviesle.filter(movie => movie.id !== id));\n//             handleConfirmClose()\n//         } catch (error) {\n//             alert('There was an error deleting the style')\n//         }\n//     };\n\n//     // Update\n//     const handleEditMovie = async () => {\n//         try {\n//             if (!editMovie || !editMovie.id) {\n//                 console.error('editMovie hoặc editMovie.id không hợp lệ:', editMovie);\n//                 return;\n//             }\n\n//             const response = await axios.put(`http://localhost:8080/website/movie/${editMovie.id}`, editMovie);\n\n//             setMovie(prevMovies => {\n//                 if (!prevMovies) {\n//                     // console.error('prevMovies đang là null hoặc undefined');\n//                     return [];\n//                 }\n//                 return prevMovies.map(movie =>\n//                     movie.id === editMovie.id ? response.data : movie\n//                 );\n//             });\n\n//             handleCloseEdit1();\n//             handleCloseEdit2();\n\n//         } catch (error) {\n//             console.error('Lỗi xảy ra khi cập nhật:', error);\n//         }\n//     };\n\n//     useEffect(() => {\n//         axios.get('http://localhost:8080/website/movieLe')\n//             .then(response => {\n//                 setMovieLe(response.data);\n//             })\n//             .catch(error => console.error(error));\n//     }, []);\n//     useEffect(() => {\n//         axios.get('http://localhost:8080/website/movieBo')\n//             .then(response => {\n//                 setMovieBo(response.data);\n//             })\n//             .catch(error => console.error(error));\n//     }, []);\n\n//     useEffect(() => {\n//         axios.get('http://localhost:8080/website/movieChieuRap')\n//             .then(response => {\n//                 setMovieChieuRap(response.data);\n//             })\n//             .catch(error => console.error(error));\n//     }, []);\n//     // ADD\n//     //   const [editNation, setEditNation] = useState({\n//     //         name: ''\n//     //     })\n//     const [newEpisodes, setNewEpisodes] = useState({\n//         name: \"\",\n//         link: \"\" // Thêm trường link\n//     });\n//     const handleChange = (e) => {\n//         const { name, value } = e.target;\n//         setNewEpisodes((prev) => ({\n//             ...prev,\n//             [name]: value,\n//         }));\n//     };\n//     const [episodes, setEpisodes] = useState([]);\n\n//     const handleAdd = async () => {\n//         try {\n//             if (!newEpisodes.name.trim()) {\n//                 window.alert(\"Vui lòng nhập số tập!\");\n//                 return;\n//             }\n//             if (!newEpisodes.link.trim()) {\n//                 window.alert(\"Vui lòng nhập link!\");\n//                 return;\n//             }\n\n//             let existingEpisodes = [];\n\n//             try {\n//                 const response = await axios.get(`/website/episodesALLByIdMovie/${editMovie.id}`);\n//                 existingEpisodes = Array.isArray(response.data) ? response.data : [];\n//             } catch (error) {\n//                 if (error.response && error.response.status === 404) {\n//                     console.warn(\"API không tìm thấy danh sách tập. Bỏ qua kiểm tra trùng lặp.\");\n//                 } else {\n//                     console.error(\"Lỗi khi lấy danh sách tập:\", error);\n//                     window.alert(\"Lỗi khi lấy danh sách tập phim!\");\n//                     return;\n//                 }\n//             }\n\n//             const isDuplicate = existingEpisodes.some(ep => (ep.name?.toString() || \"\").trim() === newEpisodes.name.trim());\n//             if (isDuplicate) {\n//                 window.alert(\"Tập phim này đã tồn tại!\");\n//                 return;\n//             }\n\n//             const newEpisodeData = {\n//                 name: newEpisodes.name.trim(),\n//                 link: newEpisodes.link.trim(),\n//                 movie: { id: editMovie.id },\n//             };\n\n//             const addResponse = await axios.post(\n//                 \"http://localhost:8080/website/episodes\",\n//                 newEpisodeData\n//             );\n\n//             setEpisodes((prev) => [...prev, addResponse.data]);\n//             setNewEpisodes({ name: \"\", link: \"\" });\n\n//             window.alert(\"Thêm tập phim thành công!\");\n//         } catch (error) {\n//             console.error(\"Lỗi khi thêm tập phim:\", error);\n//             window.alert(\"Có lỗi xảy ra khi thêm tập phim!\");\n//         }\n//     };\n\n//     return (\n//         <Box sx={{ '& > :not(movie)': { maxWidth: '100%' } }}>\n\n//             <TabContext value={value}>\n//                 <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n//                     <TabList onChange={handleChangeTab} aria-label=\"lab API tabs example\">\n//                         <Tab label=\"Phim lẻ\" value=\"1\" />\n//                         <Tab label=\"Phim bộ\" value=\"2\" />\n//                         <Tab label=\"Phim chiếu rạp\" value=\"3\" />\n//                     </TabList>\n//                 </Box>\n//                 <TabPanel value=\"1\">\n//                     <TableContainer component={Paper}>\n//                         <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n//                             <TableHead>\n//                                 <TableRow style={{ backgroundColor: 'Gray' }}>\n//                                     <TableCell align=\"center\">STT</TableCell>\n//                                     <TableCell align=\"center\">Name Movie</TableCell>\n//                                     <TableCell align=\"center\">Duration</TableCell>\n//                                     <TableCell align=\"center\">Type</TableCell>\n//                                     <TableCell align=\"center\">Hình ảnh</TableCell>\n//                                     <TableCell align=\"center\">Actions</TableCell>\n//                                 </TableRow>\n//                             </TableHead>\n//                             <TableBody>\n//                                 {Array.isArray(moviesle) && moviesle.length > 0 ? (\n//                                     moviesle.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((moviele, index) => (\n//                                         <TableRow key={moviele.id}>\n//                                             <TableCell align=\"center\">{page * rowsPerPage + index + 1}</TableCell>\n//                                             <TableCell align=\"center\">{moviele.name}</TableCell>\n//                                             <TableCell align=\"center\">{moviele.duration} (phút)</TableCell>\n//                                             <TableCell align=\"center\"> {moviele.types.map((type) => type.name).join(\", \")}</TableCell>\n//                                             <TableCell align=\"center\">\n//                                                 <img\n//                                                     src={`data:image/jpeg;base64,${moviele.image}`}\n//                                                     alt={moviele.name}\n//                                                     style={{ width: \"50px\", height: \"50px\", objectFit: \"cover\", borderRadius: \"8px\" }}\n//                                                 />\n//                                             </TableCell>\n//                                             <TableCell sx={{ justifyContent: 'center' }}>\n//                                                 <IconButton color=\"primary\" onClick={() => handleConfirmOpen(moviele.id)}>\n//                                                     <DeleteIcon />\n//                                                 </IconButton>\n//                                                 <IconButton color=\"primary\" onClick={() => handleClickOpenEdit1(moviele)}>\n//                                                     <EditIcon />\n//                                                 </IconButton>\n\n//                                             </TableCell>\n//                                         </TableRow>\n//                                     ))\n//                                 ) : (\n//                                     <TableRow >\n//                                         <TableCell colSpan={6} align=\"center\">Loading...</TableCell>\n//                                     </TableRow>\n//                                 )}\n//                             </TableBody>\n//                         </Table>\n//                         <TablePagination\n//                             rowsPerPageOptions={[5, 10, 25]}\n//                             component=\"div\"\n//                             count={moviesle != null ? moviesle.length : 0}\n//                             rowsPerPage={rowsPerPage}\n//                             page={page}\n//                             onPageChange={handleChangePage}\n//                             onRowsPerPageChange={handleChangeRowsPerPage}\n//                         />\n//                     </TableContainer>\n//                 </TabPanel>\n//                 <TabPanel value=\"2\">\n//                     <TableContainer component={Paper}>\n//                         <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n//                             <TableHead>\n//                                 <TableRow style={{ backgroundColor: 'Gray' }}>\n//                                     <TableCell align=\"center\">STT</TableCell>\n//                                     <TableCell align=\"center\">Name Movie</TableCell>\n//                                     <TableCell align=\"center\">Duration</TableCell>\n//                                     <TableCell align=\"center\">Episodes</TableCell>\n//                                     <TableCell align=\"center\">Type</TableCell>\n//                                     <TableCell align=\"center\">Hình ảnh</TableCell>\n//                                     <TableCell align=\"center\">Actions</TableCell>\n//                                 </TableRow>\n//                             </TableHead>\n//                             <TableBody>\n//                                 {Array.isArray(moviesbo) && moviesbo.length > 0 ? (\n//                                     moviesbo.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((moviebo, index) => (\n//                                         <TableRow key={moviebo.id}>\n//                                             <TableCell align=\"center\">{page * rowsPerPage + index + 1}</TableCell>\n//                                             <TableCell align=\"center\">{moviebo.name}</TableCell>\n//                                             <TableCell align=\"center\">{moviebo.duration} (phút)</TableCell>\n//                                             <TableCell align=\"center\">{moviebo.episodes} (tập)</TableCell>\n//                                             <TableCell align=\"center\"> {moviebo.types.map((type) => type.name).join(\", \")}</TableCell>\n//                                             <TableCell align=\"center\">\n//                                                 <img\n//                                                     src={`data:image/jpeg;base64,${moviebo.image}`}\n//                                                     alt={moviebo.name}\n//                                                     style={{ width: \"50px\", height: \"50px\", objectFit: \"cover\", borderRadius: \"8px\" }}\n//                                                 />\n//                                             </TableCell>\n//                                             <TableCell sx={{ justifyContent: 'center' }}>\n//                                                 <IconButton color=\"primary\" onClick={() => handleConfirmOpen(moviebo.id)}>\n//                                                     <DeleteIcon />\n//                                                 </IconButton>\n//                                                 <IconButton color=\"primary\" onClick={() => handleClickOpenEdit2(moviebo)}>\n//                                                     <EditIcon />\n//                                                 </IconButton>\n//                                                 <IconButton color=\"primary\" onClick={() => handleClickOpenAdd(moviebo)}>\n//                                                     <AddCircleIcon />\n//                                                 </IconButton>\n//                                             </TableCell>\n//                                         </TableRow>\n//                                     ))\n//                                 ) : (\n//                                     <TableRow>\n//                                         <TableCell colSpan={6} align=\"center\">Loading...</TableCell>\n//                                     </TableRow>\n//                                 )}\n//                             </TableBody>\n//                         </Table>\n//                         <TablePagination\n//                             rowsPerPageOptions={[5, 10, 25]}\n//                             component=\"div\"\n//                             count={moviesbo != null ? moviesbo.length : 0}\n//                             rowsPerPage={rowsPerPage}\n//                             page={page}\n//                             onPageChange={handleChangePage}\n//                             onRowsPerPageChange={handleChangeRowsPerPage}\n//                         />\n//                     </TableContainer>\n//                 </TabPanel>\n//                 <TabPanel value=\"3\">\n//                     <TableContainer component={Paper}>\n//                         <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n//                             <TableHead>\n//                                 <TableRow style={{ backgroundColor: 'Gray' }}>\n//                                     <TableCell align=\"center\">STT</TableCell>\n//                                     <TableCell align=\"center\">Name Movie</TableCell>\n//                                     <TableCell align=\"center\">Duration</TableCell>\n//                                     <TableCell align=\"center\">Type</TableCell>\n//                                     <TableCell align=\"center\">Hình ảnh</TableCell>\n//                                     <TableCell align=\"center\">Actions</TableCell>\n//                                 </TableRow>\n//                             </TableHead>\n//                             <TableBody>\n//                                 {Array.isArray(moviesChieuRap) && moviesChieuRap.length > 0 ? (\n//                                     moviesChieuRap.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((movieChieuRap, index) => (\n//                                         <TableRow key={movieChieuRap.id}>\n//                                             <TableCell align=\"center\">{page * rowsPerPage + index + 1}</TableCell>\n//                                             <TableCell align=\"center\">{movieChieuRap.name}</TableCell>\n//                                             <TableCell align=\"center\">{movieChieuRap.duration} (phút)</TableCell>\n//                                             <TableCell align=\"center\"> {movieChieuRap.types.map((type) => type.name).join(\", \")}</TableCell>\n//                                             <TableCell align=\"center\">\n//                                                 <img\n//                                                     src={`data:image/jpeg;base64,${movieChieuRap.image}`}\n//                                                     alt={movieChieuRap.name}\n//                                                     style={{ width: \"50px\", height: \"50px\", objectFit: \"cover\", borderRadius: \"8px\" }}\n//                                                 />\n//                                             </TableCell>\n//                                             <TableCell sx={{ justifyContent: 'center' }}>\n//                                                 <IconButton color=\"primary\" onClick={() => handleConfirmOpen(movieChieuRap.id)}>\n//                                                     <DeleteIcon />\n//                                                 </IconButton>\n//                                                 <IconButton color=\"primary\" onClick={() => handleClickOpenEdit1(movieChieuRap)}>\n//                                                     <EditIcon />\n//                                                 </IconButton>\n\n//                                             </TableCell>\n//                                         </TableRow>\n//                                     ))\n//                                 ) : (\n//                                     <TableRow >\n//                                         <TableCell colSpan={6} align=\"center\">Loading...</TableCell>\n//                                     </TableRow>\n//                                 )}\n//                             </TableBody>\n//                         </Table>\n//                         <TablePagination\n//                             rowsPerPageOptions={[5, 10, 25]}\n//                             component=\"div\"\n//                             count={moviesChieuRap != null ? moviesChieuRap.length : 0}\n//                             rowsPerPage={rowsPerPage}\n//                             page={page}\n//                             onPageChange={handleChangePage}\n//                             onRowsPerPageChange={handleChangeRowsPerPage}\n//                         />\n//                     </TableContainer>\n//                 </TabPanel>\n//             </TabContext>\n\n//             {/* add */}\n//             <Dialog\n//                 open={openAdd}\n//                 onClose={handleCloseAdd}\n//                 maxWidth=\"xl\" // Tăng kích thước tối đa\n//                 fullWidth // Đảm bảo Dialog mở rộng toàn bộ chiều rộng có thể\n//                 sx={{ '& .MuiDialog-paper': { width: '700px' } }} // Tăng độ rộng cụ thể\n//             >\n//                 <DialogTitle>Add Episodes</DialogTitle>\n//                 <DialogContent style={{ width: \"700px\" }}>\n//                     <Grid container rowSpacing={1} columnSpacing={{ xs: 1, sm: 2, md: 3 }}>\n//                         <Grid item xs={6}>\n//                             <br></br>\n//                             <TextField\n//                                 id=\"outlined-multiline-flexible\"\n//                                 label=\"Id Movie ...\"\n//                                 multiline\n//                                 fullWidth\n//                                 name=\"movie\"\n//                                 maxRows={10}\n//                                 value={editMovie.id || ''}\n//                                 onChange={handleChange}\n//                             />\n//                         </Grid>\n//                         <Grid item xs={6}>\n//                             <br></br>\n//                             <TextField\n//                                 id=\"outlined-multiline-flexible\"\n//                                 label=\"Episodes ...\"\n//                                 multiline\n//                                 fullWidth\n//                                 name='name'\n//                                 value={newEpisodes.name}\n//                                 maxRows={10}\n//                                 onChange={(e) => {\n//                                     const value = e.target.value;\n//                                     if (/^\\d*$/.test(value)) {\n//                                         handleChange(e);\n//                                     } else {\n//                                         alert(\"Vui lòng nhập số!\");\n//                                     }\n//                                 }}\n//                             />\n//                         </Grid>\n//                         <Grid item xs={6}>\n//                             <br></br>\n//                             <TextField\n//                                 id=\"outlined-multiline-flexible\"\n//                                 label=\"Link film ...\"\n//                                 multiline\n//                                 fullWidth\n//                                 name='link'\n//                                 maxRows={10}\n//                                 value={newEpisodes.link}\n//                                 onChange={handleChange}\n//                             />\n//                         </Grid>\n//                     </Grid>\n//                 </DialogContent>\n//                 <DialogActions>\n//                     <Button onClick={handleCloseAdd} color='primary'>\n//                         Cancel\n//                     </Button>\n//                     <Button onClick={handleAdd} color='secondary' variant='contained'>\n//                         Add\n//                     </Button>\n//                 </DialogActions>\n//             </Dialog>\n//             {/* Xoa */}\n//             <Dialog open={confirmOpen} onClose={handleConfirmClose}>\n//                 <DialogTitle>Confirm DeleteId</DialogTitle>\n//                 <DialogContent>Are you sure you want to delete this Style?</DialogContent>\n//                 <DialogActions>\n//                     <Button onClick={handleConfirmClose} color='primary'>\n//                         Cancel\n//                     </Button>\n//                     <Button onClick={() => { handleDelete(deleteId); }} color='secondary' variant='contained'>\n//                         Delete\n//                     </Button>\n//                 </DialogActions>\n//             </Dialog>\n//             {/* edit 1*/}\n//             <Dialog\n//                 open={openEdit1}\n//                 onClose={handleCloseEdit1}\n//                 maxWidth=\"xl\" // Tăng kích thước tối đa\n//                 fullWidth // Đảm bảo Dialog mở rộng toàn bộ chiều rộng có thể\n//                 sx={{ '& .MuiDialog-paper': { width: '1000px' } }} // Tăng độ rộng cụ thể\n//             >\n//                 <DialogTitle>Update Movie</DialogTitle>\n//                 <DialogContent style={{ width: \"1000px\" }}>\n//                     <Grid container rowSpacing={1} columnSpacing={{ xs: 1, sm: 2, md: 3 }}>\n//                         <Grid item xs={6}>\n//                             <br></br>\n//                             <TextField\n//                                 id=\"outlined-multiline-flexible\"\n//                                 label=\"Name Movie ...\"\n//                                 multiline\n//                                 fullWidth\n//                                 name=\"name\"\n//                                 maxRows={10}\n//                                 value={editMovie.name || ''}\n//                                 onChange={handleChangeEdit}\n//                             />\n//                         </Grid>\n//                         <Grid item xs={6}>\n//                             <br></br>\n//                             <TextField\n//                                 id=\"outlined-multiline-flexible\"\n//                                 label=\"Duration ...\"\n//                                 multiline\n//                                 fullWidth\n//                                 name=\"duration\"\n//                                 maxRows={10}\n//                                 value={editMovie.duration || ''}\n//                                 onChange={handleChangeEdit}\n//                             />\n//                         </Grid>\n//                         <Grid item xs={6}>\n//                             <br></br>\n//                             <TextField\n//                                 id=\"outlined-multiline-flexible\"\n//                                 label=\"Year of issue ...\"\n//                                 multiline\n//                                 fullWidth\n//                                 name=\"directors\"\n//                                 maxRows={10}\n//                                 value={editMovie.directors || ''}\n//                                 onChange={handleChangeEdit}\n//                             />\n//                         </Grid>\n//                         <Grid item xs={6}>\n//                             <br></br>\n//                             <TextField\n//                                 id=\"outlined-multiline-flexible\"\n//                                 label=\"Trailer ...\"\n//                                 multiline\n//                                 fullWidth\n//                                 name=\"trailer\"\n//                                 maxRows={10}\n//                                 value={editMovie.trailer || ''}\n//                                 onChange={handleChangeEdit}\n//                             />\n//                         </Grid>\n//                         <Grid item xs={6}>\n//                             <br></br>\n//                             <TextField\n//                                 id=\"outlined-multiline-flexible\"\n//                                 label=\"Cast ...\"\n//                                 multiline\n//                                 fullWidth\n//                                 name=\"cast\"\n//                                 maxRows={10}\n//                                 value={editMovie.cast || ''}\n//                                 onChange={handleChangeEdit}\n//                             />\n//                         </Grid>\n//                         <Grid item xs={6}>\n//                             <br></br>\n//                             <TextField\n//                                 id=\"outlined-multiline-flexible\"\n//                                 label=\"Directors ...\"\n//                                 multiline\n//                                 fullWidth\n//                                 name=\"directors\"\n//                                 maxRows={10}\n//                                 value={editMovie.directors || ''}\n//                                 onChange={handleChangeEdit}\n//                             />\n//                         </Grid>\n//                         <Grid item xs={6}>\n//                             <br></br>\n//                             <Autocomplete\n//                                 multiple\n//                                 id=\"checkboxes-tags-demo\"\n//                                 options={types || []} // Đảm bảo không bị lỗi nếu types chưa có dữ liệu\n//                                 disableCloseOnSelect\n//                                 getOptionLabel={(option) => option.name}\n//                                 value={selectedType} // Hiển thị danh sách thể loại đã chọn\n//                                 onChange={(event, newValue) => {\n//                                     setSelectedType(newValue);\n//                                     setEditMovie(prev => ({\n//                                         ...prev,\n//                                         types: newValue // Cập nhật type cho movie\n//                                     }));\n//                                 }}\n//                                 renderOption={(props, option, { selected }) => (\n//                                     <li {...props} key={option.id}>\n//                                         <Checkbox\n//                                             icon={icon}\n//                                             checkedIcon={checkedIcon}\n//                                             style={{ marginRight: 8 }}\n//                                             checked={selected}\n//                                         />\n//                                         {option.name}\n//                                     </li>\n//                                 )}\n//                                 fullWidth\n//                                 renderInput={(params) => (\n//                                     <TextField {...params} label=\"Name Type..\" placeholder=\"Select Types ...\" />\n//                                 )}\n//                             />\n//                         </Grid>\n//                         <Grid item xs={6}>\n//                             <br></br>\n//                             <Autocomplete\n//                                 disablePortal\n//                                 options={nations}\n//                                 getOptionLabel={(option) => option.name}\n//                                 value={selectedNation} // Gán giá trị từ state\n//                                 onChange={(event, newValue) => {\n//                                     setSelectedNation(newValue); // Cập nhật giá trị hiển thị\n//                                     setEditMovie((prev) => ({\n//                                         ...prev,\n//                                         nation: newValue ? newValue.id : null, // Lưu ID vào state của phim\n//                                     }));\n//                                 }}\n//                                 name=\"nation\"\n//                                 fullWidth\n//                                 renderInput={(params) => <TextField {...params} label=\"Name Nation ...\" />}\n//                             />\n//                         </Grid>\n//                         <Grid item xs={6}>\n//                             <br></br>\n//                             <Autocomplete\n//                                 disablePortal\n//                                 options={styles}\n//                                 getOptionLabel={(option) => option.name}\n//                                 value={selectedStyle}\n//                                 onChange={(event, newValue) => {\n//                                     setSelectedStyle(newValue);\n//                                     setNewMovie((prev) => ({\n//                                         ...prev,\n//                                         style: newValue ? newValue.id : null,\n//                                     }));\n//                                 }}\n//                                 name='style'\n//                                 fullWidth\n//                                 renderInput={(params) => <TextField {...params} label=\"Name Style ...\" />}\n//                             />\n//                         </Grid>\n//                         <Grid item xs={6}>\n//                             <br></br>\n//                             <TextField\n//                                 id=\"outlined-multiline-flexible\"\n//                                 label=\"Link ...\"\n//                                 multiline\n//                                 fullWidth\n//                                 name=\"link\"\n//                                 maxRows={10}\n//                                 value={editMovie.link || ''}\n//                                 onChange={handleChangeEdit}\n//                             />\n//                         </Grid>\n//                         <Grid item xs={6}>\n//                             <br></br>\n//                             <Autocomplete\n//                                 disablePortal\n//                                 options={[\n//                                     { label: \"Đang chiếu\", value: \"0\" },\n//                                     { label: \"Chưa chiếu\", value: \"1\" },\n//                                 ]}\n//                                 fullWidth\n//                                 name=\"status\"\n//                                 value={\n//                                     editMovie.status !== undefined\n//                                         ? [\n//                                             { label: \"Đang chiếu\", value: \"0\" },\n//                                             { label: \"Chưa chiếu\", value: \"1\" }\n//                                         ].find(option => option.value === String(editMovie.status)) || null\n//                                         : null\n//                                 }\n//                                 onChange={(event, newValue) => {\n//                                     setEditMovie((prev) => ({ ...prev, status: newValue ? newValue.value : \"\" }));\n//                                 }}\n//                                 getOptionLabel={(option) => option?.label || \"\"}\n//                                 renderInput={(params) => (\n//                                     <TextField {...params} label=\"Status ...\" />\n//                                 )}\n//                             />\n//                         </Grid>\n//                         <Grid item xs={6}>\n//                             <br></br>\n//                             <TextareaAutosize\n//                                 name=\"description\"\n//                                 // value={newMovie.description}\n//                                 value={editMovie.description || ''}\n//                                 onChange={(e) => setNewMovie({ ...newMovie, description: e.target.value })}\n//                                 aria-label=\"empty textarea\"\n//                                 placeholder=\"Description ...\"\n//                                 minRows={3}\n//                                 style={{\n//                                     width: \"100%\",\n//                                     padding: \"10px\",\n//                                     fontSize: \"16px\",\n//                                     borderRadius: \"5px\",\n//                                     border: \"1px solid #ccc\",\n//                                     outline: \"none\",\n//                                     resize: \"vertical\"\n//                                 }}\n//                             />\n\n//                         </Grid>\n\n//                         <Grid item xs={6}>\n//                             {/* <br></br> */}\n//                             <div className=\"mb-1\">\n//                                 Image <span className=\"font-css top\">*</span>\n//                                 <div>\n//                                     <input type=\"file\" name=\"image\" id=\"file-input\" onChange={handleImageChange} />\n//                                 </div>\n//                                 <br />\n\n//                                 {/* Kiểm tra nếu có ảnh thì hiển thị */}\n//                                 {imagePreview || editMovie?.image ? (\n//                                     <div className=\"mt-2 flex items-center gap-2\">\n//                                         <img\n//                                             src={imagePreview || `data:image/jpeg;base64,${editMovie.image}`}\n//                                             alt=\"Movie\"\n//                                             className=\"w-16 h-16 object-cover rounded-lg border\"\n//                                             style={{ width: \"100px\", height: \"100px\", objectFit: \"cover\", borderRadius: \"8px\" }}\n//                                         />\n//                                         {/* <button\n//                                             onClick={handleDeleteImage}\n//                                             className=\"bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600\"\n//                                         >\n//                                             Delete Image\n//                                         </button> */}\n//                                     </div>\n//                                 ) : null}\n//                             </div>\n\n//                         </Grid>\n\n//                     </Grid>\n\n//                 </DialogContent>\n//                 <DialogActions>\n//                     <Button onClick={handleCloseEdit1} color=\"primary\">\n//                         Cancel\n//                     </Button>\n//                     <Button color=\"primary\" variant=\"contained\" onClick={handleEditMovie}>\n//                         Update\n//                     </Button>\n//                 </DialogActions>\n//             </Dialog>\n//             {/* edit2 */}\n//             <Dialog\n//                 open={openEdit2}\n//                 onClose={handleCloseEdit2}\n//                 maxWidth=\"xl\" // Tăng kích thước tối đa\n//                 fullWidth // Đảm bảo Dialog mở rộng toàn bộ chiều rộng có thể\n//                 sx={{ '& .MuiDialog-paper': { width: '1000px' } }} // Tăng độ rộng cụ thể\n//             >\n//                 <DialogTitle>Update Movie</DialogTitle>\n//                 <DialogContent style={{ width: \"1000px\" }}>\n//                     <Grid container rowSpacing={1} columnSpacing={{ xs: 1, sm: 2, md: 3 }}>\n//                         <Grid item xs={6}>\n//                             <br></br>\n//                             <TextField\n//                                 id=\"outlined-multiline-flexible\"\n//                                 label=\"Name Movie ...\"\n//                                 multiline\n//                                 fullWidth\n//                                 name=\"name\"\n//                                 maxRows={10}\n//                                 value={editMovie.name || ''}\n//                                 onChange={handleChangeEdit}\n//                             />\n//                         </Grid>\n//                         <Grid item xs={6}>\n//                             <br></br>\n//                             <TextField\n//                                 id=\"outlined-multiline-flexible\"\n//                                 label=\"Duration ...\"\n//                                 multiline\n//                                 fullWidth\n//                                 name=\"duration\"\n//                                 maxRows={10}\n//                                 value={editMovie.duration || ''}\n//                                 onChange={handleChangeEdit}\n//                             />\n//                         </Grid>\n//                         <Grid item xs={6}>\n//                             <br></br>\n//                             <TextField\n//                                 id=\"outlined-multiline-flexible\"\n//                                 label=\"Year of issue ...\"\n//                                 multiline\n//                                 fullWidth\n//                                 name=\"directors\"\n//                                 maxRows={10}\n//                                 value={editMovie.directors || ''}\n//                                 onChange={handleChangeEdit}\n//                             />\n//                         </Grid>\n//                         <Grid item xs={6}>\n//                             <br></br>\n//                             <TextField\n//                                 id=\"outlined-multiline-flexible\"\n//                                 label=\"Trailer ...\"\n//                                 multiline\n//                                 fullWidth\n//                                 name=\"trailer\"\n//                                 maxRows={10}\n//                                 value={editMovie.trailer || ''}\n//                                 onChange={handleChangeEdit}\n//                             />\n//                         </Grid>\n//                         <Grid item xs={6}>\n//                             <br></br>\n//                             <TextField\n//                                 id=\"outlined-multiline-flexible\"\n//                                 label=\"Cast ...\"\n//                                 multiline\n//                                 fullWidth\n//                                 name=\"cast\"\n//                                 maxRows={10}\n//                                 value={editMovie.cast || ''}\n//                                 onChange={handleChangeEdit}\n//                             />\n//                         </Grid>\n//                         <Grid item xs={6}>\n//                             <br></br>\n//                             <TextField\n//                                 id=\"outlined-multiline-flexible\"\n//                                 label=\"Directors ...\"\n//                                 multiline\n//                                 fullWidth\n//                                 name=\"directors\"\n//                                 maxRows={10}\n//                                 value={editMovie.directors || ''}\n//                                 onChange={handleChangeEdit}\n//                             />\n//                         </Grid>\n//                         <Grid item xs={6}>\n//                             <br></br>\n//                             <Autocomplete\n//                                 multiple\n//                                 id=\"checkboxes-tags-demo\"\n//                                 options={types || []} // Đảm bảo không bị lỗi nếu types chưa có dữ liệu\n//                                 disableCloseOnSelect\n//                                 getOptionLabel={(option) => option.name}\n//                                 value={selectedType} // Hiển thị danh sách thể loại đã chọn\n//                                 onChange={(event, newValue) => {\n//                                     setSelectedType(newValue);\n//                                     setEditMovie(prev => ({\n//                                         ...prev,\n//                                         types: newValue // Cập nhật type cho movie\n//                                     }));\n//                                 }}\n//                                 renderOption={(props, option, { selected }) => (\n//                                     <li {...props} key={option.id}>\n//                                         <Checkbox\n//                                             icon={icon}\n//                                             checkedIcon={checkedIcon}\n//                                             style={{ marginRight: 8 }}\n//                                             checked={selected}\n//                                         />\n//                                         {option.name}\n//                                     </li>\n//                                 )}\n//                                 fullWidth\n//                                 renderInput={(params) => (\n//                                     <TextField {...params} label=\"Name Type..\" placeholder=\"Select Types ...\" />\n//                                 )}\n//                             />\n//                         </Grid>\n//                         <Grid item xs={6}>\n//                             <br></br>\n//                             <Autocomplete\n//                                 disablePortal\n//                                 options={nations}\n//                                 getOptionLabel={(option) => option.name}\n//                                 value={selectedNation} // Gán giá trị từ state\n//                                 onChange={(event, newValue) => {\n//                                     setSelectedNation(newValue); // Cập nhật giá trị hiển thị\n//                                     setEditMovie((prev) => ({\n//                                         ...prev,\n//                                         nation: newValue ? newValue.id : null, // Lưu ID vào state của phim\n//                                     }));\n//                                 }}\n//                                 name=\"nation\"\n//                                 fullWidth\n//                                 renderInput={(params) => <TextField {...params} label=\"Name Nation ...\" />}\n//                             />\n//                         </Grid>\n//                         <Grid item xs={6}>\n//                             <br></br>\n//                             <Autocomplete\n//                                 disablePortal\n//                                 options={styles}\n//                                 getOptionLabel={(option) => option.name}\n//                                 value={selectedStyle}\n//                                 onChange={(event, newValue) => {\n//                                     setSelectedStyle(newValue);\n//                                     setNewMovie((prev) => ({\n//                                         ...prev,\n//                                         style: newValue ? newValue.id : null,\n//                                     }));\n//                                 }}\n//                                 name='style'\n//                                 fullWidth\n//                                 renderInput={(params) => <TextField {...params} label=\"Name Style ...\" />}\n//                             />\n//                         </Grid>\n//                         <Grid item xs={6}>\n//                             <br></br>\n//                             <TextField\n//                                 id=\"outlined-multiline-flexible\"\n//                                 label=\"Episodes ...\"\n//                                 multiline\n//                                 fullWidth\n//                                 name=\"episodes\"\n//                                 maxRows={10}\n//                                 value={editMovie.episodes || ''}\n//                                 onChange={handleChangeEdit}\n//                             />\n//                         </Grid>\n//                         <Grid item xs={6}>\n//                             <br></br>\n//                             <Autocomplete\n//                                 disablePortal\n//                                 options={[\n//                                     { label: \"Đang chiếu\", value: \"0\" },\n//                                     { label: \"Chưa chiếu\", value: \"1\" },\n//                                 ]}\n//                                 fullWidth\n//                                 name=\"status\"\n//                                 value={\n//                                     editMovie.status !== undefined\n//                                         ? [\n//                                             { label: \"Đang chiếu\", value: \"0\" },\n//                                             { label: \"Chưa chiếu\", value: \"1\" }\n//                                         ].find(option => option.value === String(editMovie.status)) || null\n//                                         : null\n//                                 }\n//                                 onChange={(event, newValue) => {\n//                                     setEditMovie((prev) => ({ ...prev, status: newValue ? newValue.value : \"\" }));\n//                                 }}\n//                                 getOptionLabel={(option) => option?.label || \"\"}\n//                                 renderInput={(params) => (\n//                                     <TextField {...params} label=\"Status ...\" />\n//                                 )}\n//                             />\n//                         </Grid>\n//                         <Grid item xs={6}>\n//                             <br></br>\n//                             <TextareaAutosize\n//                                 name=\"description\"\n//                                 // value={newMovie.description}\n//                                 value={editMovie.description || ''}\n//                                 onChange={(e) => setNewMovie({ ...newMovie, description: e.target.value })}\n//                                 aria-label=\"empty textarea\"\n//                                 placeholder=\"Description ...\"\n//                                 minRows={3}\n//                                 style={{\n//                                     width: \"100%\",\n//                                     padding: \"10px\",\n//                                     fontSize: \"16px\",\n//                                     borderRadius: \"5px\",\n//                                     border: \"1px solid #ccc\",\n//                                     outline: \"none\",\n//                                     resize: \"vertical\"\n//                                 }}\n//                             />\n\n//                         </Grid>\n\n//                         <Grid item xs={6}>\n//                             {/* <br></br> */}\n//                             <div className=\"mb-1\">\n//                                 Image <span className=\"font-css top\">*</span>\n//                                 <div>\n//                                     <input type=\"file\" name=\"image\" id=\"file-input\" onChange={handleImageChange} />\n//                                 </div>\n//                                 <br />\n\n//                                 {/* Kiểm tra nếu có ảnh thì hiển thị */}\n//                                 {imagePreview || editMovie?.image ? (\n//                                     <div className=\"mt-2 flex items-center gap-2\">\n//                                         <img\n//                                             src={imagePreview || `data:image/jpeg;base64,${editMovie.image}`}\n//                                             alt=\"Movie\"\n//                                             className=\"w-16 h-16 object-cover rounded-lg border\"\n//                                             style={{ width: \"100px\", height: \"100px\", objectFit: \"cover\", borderRadius: \"8px\" }}\n//                                         />\n//                                         {/* <button\n//                                             onClick={handleDeleteImage}\n//                                             className=\"bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600\"\n//                                         >\n//                                             Delete Image\n//                                         </button> */}\n//                                     </div>\n//                                 ) : null}\n//                             </div>\n\n//                         </Grid>\n\n//                     </Grid>\n\n//                 </DialogContent>\n//                 <DialogActions>\n//                     <Button onClick={handleCloseEdit2} color=\"primary\">\n//                         Cancel\n//                     </Button>\n//                     <Button color=\"primary\" variant=\"contained\" onClick={handleEditMovie}>\n//                         Update\n//                     </Button>\n//                 </DialogActions>\n//             </Dialog>\n//         </Box>\n//     )\n// }\n// const blue = {\n//     100: '#DAECFF',\n//     200: '#b6daff',\n//     400: '#3399FF',\n//     500: '#007FFF',\n//     600: '#0072E5',\n//     900: '#003A75',\n// };\n\n// const grey = {\n//     50: '#F3F6F9',\n//     100: '#E5EAF2',\n//     200: '#DAE2ED',\n//     300: '#C7D0DD',\n//     400: '#B0B8C4',\n//     500: '#9DA8B7',\n//     600: '#6B7A90',\n//     700: '#434D5B',\n//     800: '#303740',\n//     900: '#1C2025',\n// };\n\n// const TextareaAutosize = styled(BaseTextareaAutosize)(\n//     ({ theme }) => `\n//     box-sizing: border-box;\n//     width: 460px;\n//     font-family: 'IBM Plex Sans', sans-serif;\n//     font-size: 0.875rem;\n//     font-weight: 400;\n//     line-height: 1.5;\n//     padding: 8px 12px;\n//     border-radius: 8px;\n//     color: ${theme.palette.mode === 'dark' ? grey[300] : grey[900]};\n//     background: ${theme.palette.mode === 'dark' ? grey[900] : '#fff'};\n//     border: 1px solid ${theme.palette.mode === 'dark' ? grey[700] : grey[200]};\n//     box-shadow: 0 2px 2px ${theme.palette.mode === 'dark' ? grey[900] : grey[50]};\n\n//     &:hover {\n//       border-color: ${blue[400]};\n//     }\n\n//     &:focus {\n//       border-color: ${blue[400]};\n//       box-shadow: 0 0 0 3px ${theme.palette.mode === 'dark' ? blue[600] : blue[200]};\n//     }\n\n//     /* firefox */\n//     &:focus-visible {\n//       outline: 0;\n//     }\n//   `,\n// );\n// export default TableMovie;","map":{"version":3,"names":[],"sources":["C:/Users/admin/OneDrive/Máy tính/duancanhan/webphim/websitephim/src/admin/js/tableMovie.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import axios from 'axios'\r\n// import Table from '@mui/material/Table';\r\n// import TableBody from '@mui/material/TableBody';\r\n// import TableCell from '@mui/material/TableCell';\r\n// import TableContainer from '@mui/material/TableContainer';\r\n// import TableHead from '@mui/material/TableHead';\r\n// import TableRow from '@mui/material/TableRow';\r\n// import { Paper, IconButton, Dialog, DialogTitle, DialogContent, DialogActions, Button } from '@mui/material';\r\n// import DeleteIcon from '@mui/icons-material/Delete';\r\n// import EditIcon from '@mui/icons-material/Edit'\r\n// import TextField from '@mui/material/TextField';\r\n// import TablePagination from '@mui/material/TablePagination';\r\n// import Box from '@mui/material/Box';\r\n// import Tab from '@mui/material/Tab';\r\n// import TabContext from '@mui/lab/TabContext';\r\n// import TabList from '@mui/lab/TabList';\r\n// import TabPanel from '@mui/lab/TabPanel';\r\n// import { styled } from '@mui/system';\r\n// import Grid from '@mui/material/Grid';\r\n// import Autocomplete from '@mui/material/Autocomplete';\r\n// import Checkbox from '@mui/material/Checkbox';\r\n// import CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';\r\n// import CheckBoxIcon from '@mui/icons-material/CheckBox';\r\n// import { TextareaAutosize as BaseTextareaAutosize } from '@mui/base/TextareaAutosize';\r\n// import AddCircleIcon from '@mui/icons-material/AddCircle';\r\n// const icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\n// const checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\r\n\r\n// function TableMovie() {\r\n//     const [movies, setMovie] = useState(null)\r\n//     const [moviesle, setMovieLe] = useState(null)\r\n//     const [moviesbo, setMovieBo] = useState(null)\r\n//     const [moviesChieuRap, setMovieChieuRap] = useState(null)\r\n\r\n//     const [deleteId, setDeleteId] = useState(null)\r\n//     const [confirmOpen, setConfirmOpen] = useState(false)\r\n//     const [openEdit1, setOpenEdit1] = useState(false)\r\n//     const [openEdit2, setOpenEdit2] = useState(false)\r\n//     const [openAdd, setOpenAdd] = useState(false)\r\n\r\n//     const [page, setPage] = React.useState(0);\r\n//     const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n//     const [newMovie, setNewMovie] = useState({})\r\n//     const [selectedImage, setSelectedImage] = useState(null); // Lưu file chưa upload\r\n//     const [imagePreview, setImagePreview] = useState(\"\");\r\n//     const [types, setType] = useState(null)\r\n//     const [nations, setNation] = useState(null)\r\n//     const [styles, setStyle] = useState(null)\r\n//     const [selectedStyle, setSelectedStyle] = useState([]);\r\n\r\n//     const [selectedType, setSelectedType] = useState([]);\r\n//     const [selectedNation, setSelectedNation] = useState([])\r\n//         ;\r\n//     const handleImageChange = (event) => {\r\n//         const file = event.target.files[0];\r\n//         if (file) {\r\n//             const reader = new FileReader();\r\n//             reader.onloadend = () => {\r\n//                 setImagePreview(reader.result);\r\n//                 setSelectedImage(reader.result);\r\n//             };\r\n//             reader.readAsDataURL(file);\r\n//         }\r\n//     };\r\n//     // const handleDeleteImage = () => {\r\n//     //     setImagePreview(\"\");\r\n//     //     setSelectedImage(null);\r\n//     // };\r\n\r\n//     // const [snackbarOpen, setSnackbarOpen] = useState(false)\r\n\r\n//     const [value, setValue] = React.useState('1');\r\n\r\n//     const handleChangeTab = (event, newValue) => {\r\n//         setValue(newValue);\r\n//     };\r\n\r\n\r\n//     const handleChangePage = (event, newPage) => {\r\n//         setPage(newPage);\r\n//     };\r\n\r\n//     const handleChangeRowsPerPage = (event) => {\r\n//         setRowsPerPage(parseInt(event.target.value, 10));\r\n//         setPage(0);\r\n//     };\r\n\r\n//     const [editMovie, setEditMovie] = useState({})\r\n\r\n//     // const handleClickOpenEdit = (movie) => {\r\n//     //     setEditMovie(movie)\r\n//     //     console.log(editMovie.type)\r\n//     //     console.log(editMovie.name)\r\n\r\n//     //     setOpenEdit(true)\r\n//     // }\r\n//     useEffect(() => {\r\n//         axios.get('http://localhost:8080/website/typeAll')\r\n//             .then(response => {\r\n//                 setType(response.data);\r\n//             })\r\n//             .catch(error => console.error(error));\r\n//     }, []);\r\n//     useEffect(() => {\r\n//         axios.get('http://localhost:8080/website/nationAll')\r\n//             .then(response => {\r\n//                 setNation(response.data);\r\n//             })\r\n//             .catch(error => console.error(error));\r\n//     }, []);\r\n//     const handleClickOpenEdit1 = (movie) => {\r\n//         setEditMovie(movie);\r\n\r\n//         // Lấy danh sách type của movie và hiển thị lên Autocomplete\r\n//         setSelectedType(movie.types || []);\r\n//         // Cập nhật giá trị nation\r\n//         setSelectedNation(movie.nation || []);\r\n//         setSelectedStyle(movie.style || []);\r\n//         console.log(movie.status)\r\n//         setEditMovie((prev) => ({ ...prev, status: movie.status }));\r\n//         console.log(\"Description value:\", movie.description);\r\n\r\n//         setOpenEdit1(true);\r\n//     };\r\n//     const handleClickOpenEdit2 = (movie) => {\r\n//         setEditMovie(movie);\r\n\r\n//         // Lấy danh sách type của movie và hiển thị lên Autocomplete\r\n//         setSelectedType(movie.types || []);\r\n//         // Cập nhật giá trị nation\r\n//         setSelectedNation(movie.nation || []);\r\n//         setSelectedStyle(movie.style || []);\r\n//         console.log(movie.status)\r\n//         setEditMovie((prev) => ({ ...prev, status: movie.status }));\r\n//         console.log(\"Description value:\", movie.description);\r\n\r\n//         setOpenEdit2(true);\r\n//     };\r\n\r\n\r\n//     const handleClickOpenAdd = (movie) => {\r\n//         setEditMovie(movie);\r\n//         setOpenAdd(true);\r\n//     };\r\n\r\n//     const handleConfirmOpen = (id) => {\r\n//         setDeleteId(id)\r\n//         setConfirmOpen(true)\r\n//     }\r\n//     const handleConfirmClose = (id) => {\r\n//         setDeleteId(null)\r\n//         setConfirmOpen(false)\r\n//     }\r\n\r\n//     const handleCloseEdit1 = () => {\r\n//         setOpenEdit1(false)\r\n//     }\r\n//     const handleCloseEdit2 = () => {\r\n//         setOpenEdit2(false)\r\n//     }\r\n//     const handleCloseAdd = () => {\r\n//         setOpenAdd(false)\r\n//     }\r\n\r\n//     const handleChangeEdit = (event) => {\r\n//         setEditMovie({\r\n//             ...editMovie,\r\n//             [event.target.name]: event.target.value\r\n//         });\r\n//     };\r\n\r\n\r\n//     // delete\r\n//     const handleDelete = async (id) => {\r\n//         try {\r\n//             await axios.delete(`http://localhost:8080/website/movie/${id}`);\r\n//             setMovie(moviesle.filter(movie => movie.id !== id));\r\n//             handleConfirmClose()\r\n//         } catch (error) {\r\n//             alert('There was an error deleting the style')\r\n//         }\r\n//     };\r\n\r\n\r\n//     // Update\r\n//     const handleEditMovie = async () => {\r\n//         try {\r\n//             if (!editMovie || !editMovie.id) {\r\n//                 console.error('editMovie hoặc editMovie.id không hợp lệ:', editMovie);\r\n//                 return;\r\n//             }\r\n\r\n//             const response = await axios.put(`http://localhost:8080/website/movie/${editMovie.id}`, editMovie);\r\n\r\n//             setMovie(prevMovies => {\r\n//                 if (!prevMovies) {\r\n//                     // console.error('prevMovies đang là null hoặc undefined');\r\n//                     return [];\r\n//                 }\r\n//                 return prevMovies.map(movie =>\r\n//                     movie.id === editMovie.id ? response.data : movie\r\n//                 );\r\n//             });\r\n\r\n//             handleCloseEdit1();\r\n//             handleCloseEdit2();\r\n\r\n//         } catch (error) {\r\n//             console.error('Lỗi xảy ra khi cập nhật:', error);\r\n//         }\r\n//     };\r\n\r\n\r\n//     useEffect(() => {\r\n//         axios.get('http://localhost:8080/website/movieLe')\r\n//             .then(response => {\r\n//                 setMovieLe(response.data);\r\n//             })\r\n//             .catch(error => console.error(error));\r\n//     }, []);\r\n//     useEffect(() => {\r\n//         axios.get('http://localhost:8080/website/movieBo')\r\n//             .then(response => {\r\n//                 setMovieBo(response.data);\r\n//             })\r\n//             .catch(error => console.error(error));\r\n//     }, []);\r\n\r\n//     useEffect(() => {\r\n//         axios.get('http://localhost:8080/website/movieChieuRap')\r\n//             .then(response => {\r\n//                 setMovieChieuRap(response.data);\r\n//             })\r\n//             .catch(error => console.error(error));\r\n//     }, []);\r\n//     // ADD\r\n//     //   const [editNation, setEditNation] = useState({\r\n//     //         name: ''\r\n//     //     })\r\n//     const [newEpisodes, setNewEpisodes] = useState({\r\n//         name: \"\",\r\n//         link: \"\" // Thêm trường link\r\n//     });\r\n//     const handleChange = (e) => {\r\n//         const { name, value } = e.target;\r\n//         setNewEpisodes((prev) => ({\r\n//             ...prev,\r\n//             [name]: value,\r\n//         }));\r\n//     };\r\n//     const [episodes, setEpisodes] = useState([]);\r\n\r\n//     const handleAdd = async () => {\r\n//         try {\r\n//             if (!newEpisodes.name.trim()) {\r\n//                 window.alert(\"Vui lòng nhập số tập!\");\r\n//                 return;\r\n//             }\r\n//             if (!newEpisodes.link.trim()) {\r\n//                 window.alert(\"Vui lòng nhập link!\");\r\n//                 return;\r\n//             }\r\n\r\n//             let existingEpisodes = [];\r\n\r\n//             try {\r\n//                 const response = await axios.get(`/website/episodesALLByIdMovie/${editMovie.id}`);\r\n//                 existingEpisodes = Array.isArray(response.data) ? response.data : [];\r\n//             } catch (error) {\r\n//                 if (error.response && error.response.status === 404) {\r\n//                     console.warn(\"API không tìm thấy danh sách tập. Bỏ qua kiểm tra trùng lặp.\");\r\n//                 } else {\r\n//                     console.error(\"Lỗi khi lấy danh sách tập:\", error);\r\n//                     window.alert(\"Lỗi khi lấy danh sách tập phim!\");\r\n//                     return;\r\n//                 }\r\n//             }\r\n\r\n//             const isDuplicate = existingEpisodes.some(ep => (ep.name?.toString() || \"\").trim() === newEpisodes.name.trim());\r\n//             if (isDuplicate) {\r\n//                 window.alert(\"Tập phim này đã tồn tại!\");\r\n//                 return;\r\n//             }\r\n\r\n//             const newEpisodeData = {\r\n//                 name: newEpisodes.name.trim(),\r\n//                 link: newEpisodes.link.trim(),\r\n//                 movie: { id: editMovie.id },\r\n//             };\r\n\r\n//             const addResponse = await axios.post(\r\n//                 \"http://localhost:8080/website/episodes\",\r\n//                 newEpisodeData\r\n//             );\r\n\r\n//             setEpisodes((prev) => [...prev, addResponse.data]);\r\n//             setNewEpisodes({ name: \"\", link: \"\" });\r\n\r\n//             window.alert(\"Thêm tập phim thành công!\");\r\n//         } catch (error) {\r\n//             console.error(\"Lỗi khi thêm tập phim:\", error);\r\n//             window.alert(\"Có lỗi xảy ra khi thêm tập phim!\");\r\n//         }\r\n//     };\r\n\r\n\r\n//     return (\r\n//         <Box sx={{ '& > :not(movie)': { maxWidth: '100%' } }}>\r\n\r\n//             <TabContext value={value}>\r\n//                 <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n//                     <TabList onChange={handleChangeTab} aria-label=\"lab API tabs example\">\r\n//                         <Tab label=\"Phim lẻ\" value=\"1\" />\r\n//                         <Tab label=\"Phim bộ\" value=\"2\" />\r\n//                         <Tab label=\"Phim chiếu rạp\" value=\"3\" />\r\n//                     </TabList>\r\n//                 </Box>\r\n//                 <TabPanel value=\"1\">\r\n//                     <TableContainer component={Paper}>\r\n//                         <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n//                             <TableHead>\r\n//                                 <TableRow style={{ backgroundColor: 'Gray' }}>\r\n//                                     <TableCell align=\"center\">STT</TableCell>\r\n//                                     <TableCell align=\"center\">Name Movie</TableCell>\r\n//                                     <TableCell align=\"center\">Duration</TableCell>\r\n//                                     <TableCell align=\"center\">Type</TableCell>\r\n//                                     <TableCell align=\"center\">Hình ảnh</TableCell>\r\n//                                     <TableCell align=\"center\">Actions</TableCell>\r\n//                                 </TableRow>\r\n//                             </TableHead>\r\n//                             <TableBody>\r\n//                                 {Array.isArray(moviesle) && moviesle.length > 0 ? (\r\n//                                     moviesle.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((moviele, index) => (\r\n//                                         <TableRow key={moviele.id}>\r\n//                                             <TableCell align=\"center\">{page * rowsPerPage + index + 1}</TableCell>\r\n//                                             <TableCell align=\"center\">{moviele.name}</TableCell>\r\n//                                             <TableCell align=\"center\">{moviele.duration} (phút)</TableCell>\r\n//                                             <TableCell align=\"center\"> {moviele.types.map((type) => type.name).join(\", \")}</TableCell>\r\n//                                             <TableCell align=\"center\">\r\n//                                                 <img\r\n//                                                     src={`data:image/jpeg;base64,${moviele.image}`}\r\n//                                                     alt={moviele.name}\r\n//                                                     style={{ width: \"50px\", height: \"50px\", objectFit: \"cover\", borderRadius: \"8px\" }}\r\n//                                                 />\r\n//                                             </TableCell>\r\n//                                             <TableCell sx={{ justifyContent: 'center' }}>\r\n//                                                 <IconButton color=\"primary\" onClick={() => handleConfirmOpen(moviele.id)}>\r\n//                                                     <DeleteIcon />\r\n//                                                 </IconButton>\r\n//                                                 <IconButton color=\"primary\" onClick={() => handleClickOpenEdit1(moviele)}>\r\n//                                                     <EditIcon />\r\n//                                                 </IconButton>\r\n\r\n//                                             </TableCell>\r\n//                                         </TableRow>\r\n//                                     ))\r\n//                                 ) : (\r\n//                                     <TableRow >\r\n//                                         <TableCell colSpan={6} align=\"center\">Loading...</TableCell>\r\n//                                     </TableRow>\r\n//                                 )}\r\n//                             </TableBody>\r\n//                         </Table>\r\n//                         <TablePagination\r\n//                             rowsPerPageOptions={[5, 10, 25]}\r\n//                             component=\"div\"\r\n//                             count={moviesle != null ? moviesle.length : 0}\r\n//                             rowsPerPage={rowsPerPage}\r\n//                             page={page}\r\n//                             onPageChange={handleChangePage}\r\n//                             onRowsPerPageChange={handleChangeRowsPerPage}\r\n//                         />\r\n//                     </TableContainer>\r\n//                 </TabPanel>\r\n//                 <TabPanel value=\"2\">\r\n//                     <TableContainer component={Paper}>\r\n//                         <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n//                             <TableHead>\r\n//                                 <TableRow style={{ backgroundColor: 'Gray' }}>\r\n//                                     <TableCell align=\"center\">STT</TableCell>\r\n//                                     <TableCell align=\"center\">Name Movie</TableCell>\r\n//                                     <TableCell align=\"center\">Duration</TableCell>\r\n//                                     <TableCell align=\"center\">Episodes</TableCell>\r\n//                                     <TableCell align=\"center\">Type</TableCell>\r\n//                                     <TableCell align=\"center\">Hình ảnh</TableCell>\r\n//                                     <TableCell align=\"center\">Actions</TableCell>\r\n//                                 </TableRow>\r\n//                             </TableHead>\r\n//                             <TableBody>\r\n//                                 {Array.isArray(moviesbo) && moviesbo.length > 0 ? (\r\n//                                     moviesbo.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((moviebo, index) => (\r\n//                                         <TableRow key={moviebo.id}>\r\n//                                             <TableCell align=\"center\">{page * rowsPerPage + index + 1}</TableCell>\r\n//                                             <TableCell align=\"center\">{moviebo.name}</TableCell>\r\n//                                             <TableCell align=\"center\">{moviebo.duration} (phút)</TableCell>\r\n//                                             <TableCell align=\"center\">{moviebo.episodes} (tập)</TableCell>\r\n//                                             <TableCell align=\"center\"> {moviebo.types.map((type) => type.name).join(\", \")}</TableCell>\r\n//                                             <TableCell align=\"center\">\r\n//                                                 <img\r\n//                                                     src={`data:image/jpeg;base64,${moviebo.image}`}\r\n//                                                     alt={moviebo.name}\r\n//                                                     style={{ width: \"50px\", height: \"50px\", objectFit: \"cover\", borderRadius: \"8px\" }}\r\n//                                                 />\r\n//                                             </TableCell>\r\n//                                             <TableCell sx={{ justifyContent: 'center' }}>\r\n//                                                 <IconButton color=\"primary\" onClick={() => handleConfirmOpen(moviebo.id)}>\r\n//                                                     <DeleteIcon />\r\n//                                                 </IconButton>\r\n//                                                 <IconButton color=\"primary\" onClick={() => handleClickOpenEdit2(moviebo)}>\r\n//                                                     <EditIcon />\r\n//                                                 </IconButton>\r\n//                                                 <IconButton color=\"primary\" onClick={() => handleClickOpenAdd(moviebo)}>\r\n//                                                     <AddCircleIcon />\r\n//                                                 </IconButton>\r\n//                                             </TableCell>\r\n//                                         </TableRow>\r\n//                                     ))\r\n//                                 ) : (\r\n//                                     <TableRow>\r\n//                                         <TableCell colSpan={6} align=\"center\">Loading...</TableCell>\r\n//                                     </TableRow>\r\n//                                 )}\r\n//                             </TableBody>\r\n//                         </Table>\r\n//                         <TablePagination\r\n//                             rowsPerPageOptions={[5, 10, 25]}\r\n//                             component=\"div\"\r\n//                             count={moviesbo != null ? moviesbo.length : 0}\r\n//                             rowsPerPage={rowsPerPage}\r\n//                             page={page}\r\n//                             onPageChange={handleChangePage}\r\n//                             onRowsPerPageChange={handleChangeRowsPerPage}\r\n//                         />\r\n//                     </TableContainer>\r\n//                 </TabPanel>\r\n//                 <TabPanel value=\"3\">\r\n//                     <TableContainer component={Paper}>\r\n//                         <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n//                             <TableHead>\r\n//                                 <TableRow style={{ backgroundColor: 'Gray' }}>\r\n//                                     <TableCell align=\"center\">STT</TableCell>\r\n//                                     <TableCell align=\"center\">Name Movie</TableCell>\r\n//                                     <TableCell align=\"center\">Duration</TableCell>\r\n//                                     <TableCell align=\"center\">Type</TableCell>\r\n//                                     <TableCell align=\"center\">Hình ảnh</TableCell>\r\n//                                     <TableCell align=\"center\">Actions</TableCell>\r\n//                                 </TableRow>\r\n//                             </TableHead>\r\n//                             <TableBody>\r\n//                                 {Array.isArray(moviesChieuRap) && moviesChieuRap.length > 0 ? (\r\n//                                     moviesChieuRap.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((movieChieuRap, index) => (\r\n//                                         <TableRow key={movieChieuRap.id}>\r\n//                                             <TableCell align=\"center\">{page * rowsPerPage + index + 1}</TableCell>\r\n//                                             <TableCell align=\"center\">{movieChieuRap.name}</TableCell>\r\n//                                             <TableCell align=\"center\">{movieChieuRap.duration} (phút)</TableCell>\r\n//                                             <TableCell align=\"center\"> {movieChieuRap.types.map((type) => type.name).join(\", \")}</TableCell>\r\n//                                             <TableCell align=\"center\">\r\n//                                                 <img\r\n//                                                     src={`data:image/jpeg;base64,${movieChieuRap.image}`}\r\n//                                                     alt={movieChieuRap.name}\r\n//                                                     style={{ width: \"50px\", height: \"50px\", objectFit: \"cover\", borderRadius: \"8px\" }}\r\n//                                                 />\r\n//                                             </TableCell>\r\n//                                             <TableCell sx={{ justifyContent: 'center' }}>\r\n//                                                 <IconButton color=\"primary\" onClick={() => handleConfirmOpen(movieChieuRap.id)}>\r\n//                                                     <DeleteIcon />\r\n//                                                 </IconButton>\r\n//                                                 <IconButton color=\"primary\" onClick={() => handleClickOpenEdit1(movieChieuRap)}>\r\n//                                                     <EditIcon />\r\n//                                                 </IconButton>\r\n\r\n//                                             </TableCell>\r\n//                                         </TableRow>\r\n//                                     ))\r\n//                                 ) : (\r\n//                                     <TableRow >\r\n//                                         <TableCell colSpan={6} align=\"center\">Loading...</TableCell>\r\n//                                     </TableRow>\r\n//                                 )}\r\n//                             </TableBody>\r\n//                         </Table>\r\n//                         <TablePagination\r\n//                             rowsPerPageOptions={[5, 10, 25]}\r\n//                             component=\"div\"\r\n//                             count={moviesChieuRap != null ? moviesChieuRap.length : 0}\r\n//                             rowsPerPage={rowsPerPage}\r\n//                             page={page}\r\n//                             onPageChange={handleChangePage}\r\n//                             onRowsPerPageChange={handleChangeRowsPerPage}\r\n//                         />\r\n//                     </TableContainer>\r\n//                 </TabPanel>\r\n//             </TabContext>\r\n\r\n\r\n//             {/* add */}\r\n//             <Dialog\r\n//                 open={openAdd}\r\n//                 onClose={handleCloseAdd}\r\n//                 maxWidth=\"xl\" // Tăng kích thước tối đa\r\n//                 fullWidth // Đảm bảo Dialog mở rộng toàn bộ chiều rộng có thể\r\n//                 sx={{ '& .MuiDialog-paper': { width: '700px' } }} // Tăng độ rộng cụ thể\r\n//             >\r\n//                 <DialogTitle>Add Episodes</DialogTitle>\r\n//                 <DialogContent style={{ width: \"700px\" }}>\r\n//                     <Grid container rowSpacing={1} columnSpacing={{ xs: 1, sm: 2, md: 3 }}>\r\n//                         <Grid item xs={6}>\r\n//                             <br></br>\r\n//                             <TextField\r\n//                                 id=\"outlined-multiline-flexible\"\r\n//                                 label=\"Id Movie ...\"\r\n//                                 multiline\r\n//                                 fullWidth\r\n//                                 name=\"movie\"\r\n//                                 maxRows={10}\r\n//                                 value={editMovie.id || ''}\r\n//                                 onChange={handleChange}\r\n//                             />\r\n//                         </Grid>\r\n//                         <Grid item xs={6}>\r\n//                             <br></br>\r\n//                             <TextField\r\n//                                 id=\"outlined-multiline-flexible\"\r\n//                                 label=\"Episodes ...\"\r\n//                                 multiline\r\n//                                 fullWidth\r\n//                                 name='name'\r\n//                                 value={newEpisodes.name}\r\n//                                 maxRows={10}\r\n//                                 onChange={(e) => {\r\n//                                     const value = e.target.value;\r\n//                                     if (/^\\d*$/.test(value)) {\r\n//                                         handleChange(e);\r\n//                                     } else {\r\n//                                         alert(\"Vui lòng nhập số!\");\r\n//                                     }\r\n//                                 }}\r\n//                             />\r\n//                         </Grid>\r\n//                         <Grid item xs={6}>\r\n//                             <br></br>\r\n//                             <TextField\r\n//                                 id=\"outlined-multiline-flexible\"\r\n//                                 label=\"Link film ...\"\r\n//                                 multiline\r\n//                                 fullWidth\r\n//                                 name='link'\r\n//                                 maxRows={10}\r\n//                                 value={newEpisodes.link}\r\n//                                 onChange={handleChange}\r\n//                             />\r\n//                         </Grid>\r\n//                     </Grid>\r\n//                 </DialogContent>\r\n//                 <DialogActions>\r\n//                     <Button onClick={handleCloseAdd} color='primary'>\r\n//                         Cancel\r\n//                     </Button>\r\n//                     <Button onClick={handleAdd} color='secondary' variant='contained'>\r\n//                         Add\r\n//                     </Button>\r\n//                 </DialogActions>\r\n//             </Dialog>\r\n//             {/* Xoa */}\r\n//             <Dialog open={confirmOpen} onClose={handleConfirmClose}>\r\n//                 <DialogTitle>Confirm DeleteId</DialogTitle>\r\n//                 <DialogContent>Are you sure you want to delete this Style?</DialogContent>\r\n//                 <DialogActions>\r\n//                     <Button onClick={handleConfirmClose} color='primary'>\r\n//                         Cancel\r\n//                     </Button>\r\n//                     <Button onClick={() => { handleDelete(deleteId); }} color='secondary' variant='contained'>\r\n//                         Delete\r\n//                     </Button>\r\n//                 </DialogActions>\r\n//             </Dialog>\r\n//             {/* edit 1*/}\r\n//             <Dialog\r\n//                 open={openEdit1}\r\n//                 onClose={handleCloseEdit1}\r\n//                 maxWidth=\"xl\" // Tăng kích thước tối đa\r\n//                 fullWidth // Đảm bảo Dialog mở rộng toàn bộ chiều rộng có thể\r\n//                 sx={{ '& .MuiDialog-paper': { width: '1000px' } }} // Tăng độ rộng cụ thể\r\n//             >\r\n//                 <DialogTitle>Update Movie</DialogTitle>\r\n//                 <DialogContent style={{ width: \"1000px\" }}>\r\n//                     <Grid container rowSpacing={1} columnSpacing={{ xs: 1, sm: 2, md: 3 }}>\r\n//                         <Grid item xs={6}>\r\n//                             <br></br>\r\n//                             <TextField\r\n//                                 id=\"outlined-multiline-flexible\"\r\n//                                 label=\"Name Movie ...\"\r\n//                                 multiline\r\n//                                 fullWidth\r\n//                                 name=\"name\"\r\n//                                 maxRows={10}\r\n//                                 value={editMovie.name || ''}\r\n//                                 onChange={handleChangeEdit}\r\n//                             />\r\n//                         </Grid>\r\n//                         <Grid item xs={6}>\r\n//                             <br></br>\r\n//                             <TextField\r\n//                                 id=\"outlined-multiline-flexible\"\r\n//                                 label=\"Duration ...\"\r\n//                                 multiline\r\n//                                 fullWidth\r\n//                                 name=\"duration\"\r\n//                                 maxRows={10}\r\n//                                 value={editMovie.duration || ''}\r\n//                                 onChange={handleChangeEdit}\r\n//                             />\r\n//                         </Grid>\r\n//                         <Grid item xs={6}>\r\n//                             <br></br>\r\n//                             <TextField\r\n//                                 id=\"outlined-multiline-flexible\"\r\n//                                 label=\"Year of issue ...\"\r\n//                                 multiline\r\n//                                 fullWidth\r\n//                                 name=\"directors\"\r\n//                                 maxRows={10}\r\n//                                 value={editMovie.directors || ''}\r\n//                                 onChange={handleChangeEdit}\r\n//                             />\r\n//                         </Grid>\r\n//                         <Grid item xs={6}>\r\n//                             <br></br>\r\n//                             <TextField\r\n//                                 id=\"outlined-multiline-flexible\"\r\n//                                 label=\"Trailer ...\"\r\n//                                 multiline\r\n//                                 fullWidth\r\n//                                 name=\"trailer\"\r\n//                                 maxRows={10}\r\n//                                 value={editMovie.trailer || ''}\r\n//                                 onChange={handleChangeEdit}\r\n//                             />\r\n//                         </Grid>\r\n//                         <Grid item xs={6}>\r\n//                             <br></br>\r\n//                             <TextField\r\n//                                 id=\"outlined-multiline-flexible\"\r\n//                                 label=\"Cast ...\"\r\n//                                 multiline\r\n//                                 fullWidth\r\n//                                 name=\"cast\"\r\n//                                 maxRows={10}\r\n//                                 value={editMovie.cast || ''}\r\n//                                 onChange={handleChangeEdit}\r\n//                             />\r\n//                         </Grid>\r\n//                         <Grid item xs={6}>\r\n//                             <br></br>\r\n//                             <TextField\r\n//                                 id=\"outlined-multiline-flexible\"\r\n//                                 label=\"Directors ...\"\r\n//                                 multiline\r\n//                                 fullWidth\r\n//                                 name=\"directors\"\r\n//                                 maxRows={10}\r\n//                                 value={editMovie.directors || ''}\r\n//                                 onChange={handleChangeEdit}\r\n//                             />\r\n//                         </Grid>\r\n//                         <Grid item xs={6}>\r\n//                             <br></br>\r\n//                             <Autocomplete\r\n//                                 multiple\r\n//                                 id=\"checkboxes-tags-demo\"\r\n//                                 options={types || []} // Đảm bảo không bị lỗi nếu types chưa có dữ liệu\r\n//                                 disableCloseOnSelect\r\n//                                 getOptionLabel={(option) => option.name}\r\n//                                 value={selectedType} // Hiển thị danh sách thể loại đã chọn\r\n//                                 onChange={(event, newValue) => {\r\n//                                     setSelectedType(newValue);\r\n//                                     setEditMovie(prev => ({\r\n//                                         ...prev,\r\n//                                         types: newValue // Cập nhật type cho movie\r\n//                                     }));\r\n//                                 }}\r\n//                                 renderOption={(props, option, { selected }) => (\r\n//                                     <li {...props} key={option.id}>\r\n//                                         <Checkbox\r\n//                                             icon={icon}\r\n//                                             checkedIcon={checkedIcon}\r\n//                                             style={{ marginRight: 8 }}\r\n//                                             checked={selected}\r\n//                                         />\r\n//                                         {option.name}\r\n//                                     </li>\r\n//                                 )}\r\n//                                 fullWidth\r\n//                                 renderInput={(params) => (\r\n//                                     <TextField {...params} label=\"Name Type..\" placeholder=\"Select Types ...\" />\r\n//                                 )}\r\n//                             />\r\n//                         </Grid>\r\n//                         <Grid item xs={6}>\r\n//                             <br></br>\r\n//                             <Autocomplete\r\n//                                 disablePortal\r\n//                                 options={nations}\r\n//                                 getOptionLabel={(option) => option.name}\r\n//                                 value={selectedNation} // Gán giá trị từ state\r\n//                                 onChange={(event, newValue) => {\r\n//                                     setSelectedNation(newValue); // Cập nhật giá trị hiển thị\r\n//                                     setEditMovie((prev) => ({\r\n//                                         ...prev,\r\n//                                         nation: newValue ? newValue.id : null, // Lưu ID vào state của phim\r\n//                                     }));\r\n//                                 }}\r\n//                                 name=\"nation\"\r\n//                                 fullWidth\r\n//                                 renderInput={(params) => <TextField {...params} label=\"Name Nation ...\" />}\r\n//                             />\r\n//                         </Grid>\r\n//                         <Grid item xs={6}>\r\n//                             <br></br>\r\n//                             <Autocomplete\r\n//                                 disablePortal\r\n//                                 options={styles}\r\n//                                 getOptionLabel={(option) => option.name}\r\n//                                 value={selectedStyle}\r\n//                                 onChange={(event, newValue) => {\r\n//                                     setSelectedStyle(newValue);\r\n//                                     setNewMovie((prev) => ({\r\n//                                         ...prev,\r\n//                                         style: newValue ? newValue.id : null,\r\n//                                     }));\r\n//                                 }}\r\n//                                 name='style'\r\n//                                 fullWidth\r\n//                                 renderInput={(params) => <TextField {...params} label=\"Name Style ...\" />}\r\n//                             />\r\n//                         </Grid>\r\n//                         <Grid item xs={6}>\r\n//                             <br></br>\r\n//                             <TextField\r\n//                                 id=\"outlined-multiline-flexible\"\r\n//                                 label=\"Link ...\"\r\n//                                 multiline\r\n//                                 fullWidth\r\n//                                 name=\"link\"\r\n//                                 maxRows={10}\r\n//                                 value={editMovie.link || ''}\r\n//                                 onChange={handleChangeEdit}\r\n//                             />\r\n//                         </Grid>\r\n//                         <Grid item xs={6}>\r\n//                             <br></br>\r\n//                             <Autocomplete\r\n//                                 disablePortal\r\n//                                 options={[\r\n//                                     { label: \"Đang chiếu\", value: \"0\" },\r\n//                                     { label: \"Chưa chiếu\", value: \"1\" },\r\n//                                 ]}\r\n//                                 fullWidth\r\n//                                 name=\"status\"\r\n//                                 value={\r\n//                                     editMovie.status !== undefined\r\n//                                         ? [\r\n//                                             { label: \"Đang chiếu\", value: \"0\" },\r\n//                                             { label: \"Chưa chiếu\", value: \"1\" }\r\n//                                         ].find(option => option.value === String(editMovie.status)) || null\r\n//                                         : null\r\n//                                 }\r\n//                                 onChange={(event, newValue) => {\r\n//                                     setEditMovie((prev) => ({ ...prev, status: newValue ? newValue.value : \"\" }));\r\n//                                 }}\r\n//                                 getOptionLabel={(option) => option?.label || \"\"}\r\n//                                 renderInput={(params) => (\r\n//                                     <TextField {...params} label=\"Status ...\" />\r\n//                                 )}\r\n//                             />\r\n//                         </Grid>\r\n//                         <Grid item xs={6}>\r\n//                             <br></br>\r\n//                             <TextareaAutosize\r\n//                                 name=\"description\"\r\n//                                 // value={newMovie.description}\r\n//                                 value={editMovie.description || ''}\r\n//                                 onChange={(e) => setNewMovie({ ...newMovie, description: e.target.value })}\r\n//                                 aria-label=\"empty textarea\"\r\n//                                 placeholder=\"Description ...\"\r\n//                                 minRows={3}\r\n//                                 style={{\r\n//                                     width: \"100%\",\r\n//                                     padding: \"10px\",\r\n//                                     fontSize: \"16px\",\r\n//                                     borderRadius: \"5px\",\r\n//                                     border: \"1px solid #ccc\",\r\n//                                     outline: \"none\",\r\n//                                     resize: \"vertical\"\r\n//                                 }}\r\n//                             />\r\n\r\n//                         </Grid>\r\n\r\n//                         <Grid item xs={6}>\r\n//                             {/* <br></br> */}\r\n//                             <div className=\"mb-1\">\r\n//                                 Image <span className=\"font-css top\">*</span>\r\n//                                 <div>\r\n//                                     <input type=\"file\" name=\"image\" id=\"file-input\" onChange={handleImageChange} />\r\n//                                 </div>\r\n//                                 <br />\r\n\r\n//                                 {/* Kiểm tra nếu có ảnh thì hiển thị */}\r\n//                                 {imagePreview || editMovie?.image ? (\r\n//                                     <div className=\"mt-2 flex items-center gap-2\">\r\n//                                         <img\r\n//                                             src={imagePreview || `data:image/jpeg;base64,${editMovie.image}`}\r\n//                                             alt=\"Movie\"\r\n//                                             className=\"w-16 h-16 object-cover rounded-lg border\"\r\n//                                             style={{ width: \"100px\", height: \"100px\", objectFit: \"cover\", borderRadius: \"8px\" }}\r\n//                                         />\r\n//                                         {/* <button\r\n//                                             onClick={handleDeleteImage}\r\n//                                             className=\"bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600\"\r\n//                                         >\r\n//                                             Delete Image\r\n//                                         </button> */}\r\n//                                     </div>\r\n//                                 ) : null}\r\n//                             </div>\r\n\r\n//                         </Grid>\r\n\r\n\r\n//                     </Grid>\r\n\r\n\r\n//                 </DialogContent>\r\n//                 <DialogActions>\r\n//                     <Button onClick={handleCloseEdit1} color=\"primary\">\r\n//                         Cancel\r\n//                     </Button>\r\n//                     <Button color=\"primary\" variant=\"contained\" onClick={handleEditMovie}>\r\n//                         Update\r\n//                     </Button>\r\n//                 </DialogActions>\r\n//             </Dialog>\r\n//             {/* edit2 */}\r\n//             <Dialog\r\n//                 open={openEdit2}\r\n//                 onClose={handleCloseEdit2}\r\n//                 maxWidth=\"xl\" // Tăng kích thước tối đa\r\n//                 fullWidth // Đảm bảo Dialog mở rộng toàn bộ chiều rộng có thể\r\n//                 sx={{ '& .MuiDialog-paper': { width: '1000px' } }} // Tăng độ rộng cụ thể\r\n//             >\r\n//                 <DialogTitle>Update Movie</DialogTitle>\r\n//                 <DialogContent style={{ width: \"1000px\" }}>\r\n//                     <Grid container rowSpacing={1} columnSpacing={{ xs: 1, sm: 2, md: 3 }}>\r\n//                         <Grid item xs={6}>\r\n//                             <br></br>\r\n//                             <TextField\r\n//                                 id=\"outlined-multiline-flexible\"\r\n//                                 label=\"Name Movie ...\"\r\n//                                 multiline\r\n//                                 fullWidth\r\n//                                 name=\"name\"\r\n//                                 maxRows={10}\r\n//                                 value={editMovie.name || ''}\r\n//                                 onChange={handleChangeEdit}\r\n//                             />\r\n//                         </Grid>\r\n//                         <Grid item xs={6}>\r\n//                             <br></br>\r\n//                             <TextField\r\n//                                 id=\"outlined-multiline-flexible\"\r\n//                                 label=\"Duration ...\"\r\n//                                 multiline\r\n//                                 fullWidth\r\n//                                 name=\"duration\"\r\n//                                 maxRows={10}\r\n//                                 value={editMovie.duration || ''}\r\n//                                 onChange={handleChangeEdit}\r\n//                             />\r\n//                         </Grid>\r\n//                         <Grid item xs={6}>\r\n//                             <br></br>\r\n//                             <TextField\r\n//                                 id=\"outlined-multiline-flexible\"\r\n//                                 label=\"Year of issue ...\"\r\n//                                 multiline\r\n//                                 fullWidth\r\n//                                 name=\"directors\"\r\n//                                 maxRows={10}\r\n//                                 value={editMovie.directors || ''}\r\n//                                 onChange={handleChangeEdit}\r\n//                             />\r\n//                         </Grid>\r\n//                         <Grid item xs={6}>\r\n//                             <br></br>\r\n//                             <TextField\r\n//                                 id=\"outlined-multiline-flexible\"\r\n//                                 label=\"Trailer ...\"\r\n//                                 multiline\r\n//                                 fullWidth\r\n//                                 name=\"trailer\"\r\n//                                 maxRows={10}\r\n//                                 value={editMovie.trailer || ''}\r\n//                                 onChange={handleChangeEdit}\r\n//                             />\r\n//                         </Grid>\r\n//                         <Grid item xs={6}>\r\n//                             <br></br>\r\n//                             <TextField\r\n//                                 id=\"outlined-multiline-flexible\"\r\n//                                 label=\"Cast ...\"\r\n//                                 multiline\r\n//                                 fullWidth\r\n//                                 name=\"cast\"\r\n//                                 maxRows={10}\r\n//                                 value={editMovie.cast || ''}\r\n//                                 onChange={handleChangeEdit}\r\n//                             />\r\n//                         </Grid>\r\n//                         <Grid item xs={6}>\r\n//                             <br></br>\r\n//                             <TextField\r\n//                                 id=\"outlined-multiline-flexible\"\r\n//                                 label=\"Directors ...\"\r\n//                                 multiline\r\n//                                 fullWidth\r\n//                                 name=\"directors\"\r\n//                                 maxRows={10}\r\n//                                 value={editMovie.directors || ''}\r\n//                                 onChange={handleChangeEdit}\r\n//                             />\r\n//                         </Grid>\r\n//                         <Grid item xs={6}>\r\n//                             <br></br>\r\n//                             <Autocomplete\r\n//                                 multiple\r\n//                                 id=\"checkboxes-tags-demo\"\r\n//                                 options={types || []} // Đảm bảo không bị lỗi nếu types chưa có dữ liệu\r\n//                                 disableCloseOnSelect\r\n//                                 getOptionLabel={(option) => option.name}\r\n//                                 value={selectedType} // Hiển thị danh sách thể loại đã chọn\r\n//                                 onChange={(event, newValue) => {\r\n//                                     setSelectedType(newValue);\r\n//                                     setEditMovie(prev => ({\r\n//                                         ...prev,\r\n//                                         types: newValue // Cập nhật type cho movie\r\n//                                     }));\r\n//                                 }}\r\n//                                 renderOption={(props, option, { selected }) => (\r\n//                                     <li {...props} key={option.id}>\r\n//                                         <Checkbox\r\n//                                             icon={icon}\r\n//                                             checkedIcon={checkedIcon}\r\n//                                             style={{ marginRight: 8 }}\r\n//                                             checked={selected}\r\n//                                         />\r\n//                                         {option.name}\r\n//                                     </li>\r\n//                                 )}\r\n//                                 fullWidth\r\n//                                 renderInput={(params) => (\r\n//                                     <TextField {...params} label=\"Name Type..\" placeholder=\"Select Types ...\" />\r\n//                                 )}\r\n//                             />\r\n//                         </Grid>\r\n//                         <Grid item xs={6}>\r\n//                             <br></br>\r\n//                             <Autocomplete\r\n//                                 disablePortal\r\n//                                 options={nations}\r\n//                                 getOptionLabel={(option) => option.name}\r\n//                                 value={selectedNation} // Gán giá trị từ state\r\n//                                 onChange={(event, newValue) => {\r\n//                                     setSelectedNation(newValue); // Cập nhật giá trị hiển thị\r\n//                                     setEditMovie((prev) => ({\r\n//                                         ...prev,\r\n//                                         nation: newValue ? newValue.id : null, // Lưu ID vào state của phim\r\n//                                     }));\r\n//                                 }}\r\n//                                 name=\"nation\"\r\n//                                 fullWidth\r\n//                                 renderInput={(params) => <TextField {...params} label=\"Name Nation ...\" />}\r\n//                             />\r\n//                         </Grid>\r\n//                         <Grid item xs={6}>\r\n//                             <br></br>\r\n//                             <Autocomplete\r\n//                                 disablePortal\r\n//                                 options={styles}\r\n//                                 getOptionLabel={(option) => option.name}\r\n//                                 value={selectedStyle}\r\n//                                 onChange={(event, newValue) => {\r\n//                                     setSelectedStyle(newValue);\r\n//                                     setNewMovie((prev) => ({\r\n//                                         ...prev,\r\n//                                         style: newValue ? newValue.id : null,\r\n//                                     }));\r\n//                                 }}\r\n//                                 name='style'\r\n//                                 fullWidth\r\n//                                 renderInput={(params) => <TextField {...params} label=\"Name Style ...\" />}\r\n//                             />\r\n//                         </Grid>\r\n//                         <Grid item xs={6}>\r\n//                             <br></br>\r\n//                             <TextField\r\n//                                 id=\"outlined-multiline-flexible\"\r\n//                                 label=\"Episodes ...\"\r\n//                                 multiline\r\n//                                 fullWidth\r\n//                                 name=\"episodes\"\r\n//                                 maxRows={10}\r\n//                                 value={editMovie.episodes || ''}\r\n//                                 onChange={handleChangeEdit}\r\n//                             />\r\n//                         </Grid>\r\n//                         <Grid item xs={6}>\r\n//                             <br></br>\r\n//                             <Autocomplete\r\n//                                 disablePortal\r\n//                                 options={[\r\n//                                     { label: \"Đang chiếu\", value: \"0\" },\r\n//                                     { label: \"Chưa chiếu\", value: \"1\" },\r\n//                                 ]}\r\n//                                 fullWidth\r\n//                                 name=\"status\"\r\n//                                 value={\r\n//                                     editMovie.status !== undefined\r\n//                                         ? [\r\n//                                             { label: \"Đang chiếu\", value: \"0\" },\r\n//                                             { label: \"Chưa chiếu\", value: \"1\" }\r\n//                                         ].find(option => option.value === String(editMovie.status)) || null\r\n//                                         : null\r\n//                                 }\r\n//                                 onChange={(event, newValue) => {\r\n//                                     setEditMovie((prev) => ({ ...prev, status: newValue ? newValue.value : \"\" }));\r\n//                                 }}\r\n//                                 getOptionLabel={(option) => option?.label || \"\"}\r\n//                                 renderInput={(params) => (\r\n//                                     <TextField {...params} label=\"Status ...\" />\r\n//                                 )}\r\n//                             />\r\n//                         </Grid>\r\n//                         <Grid item xs={6}>\r\n//                             <br></br>\r\n//                             <TextareaAutosize\r\n//                                 name=\"description\"\r\n//                                 // value={newMovie.description}\r\n//                                 value={editMovie.description || ''}\r\n//                                 onChange={(e) => setNewMovie({ ...newMovie, description: e.target.value })}\r\n//                                 aria-label=\"empty textarea\"\r\n//                                 placeholder=\"Description ...\"\r\n//                                 minRows={3}\r\n//                                 style={{\r\n//                                     width: \"100%\",\r\n//                                     padding: \"10px\",\r\n//                                     fontSize: \"16px\",\r\n//                                     borderRadius: \"5px\",\r\n//                                     border: \"1px solid #ccc\",\r\n//                                     outline: \"none\",\r\n//                                     resize: \"vertical\"\r\n//                                 }}\r\n//                             />\r\n\r\n//                         </Grid>\r\n\r\n//                         <Grid item xs={6}>\r\n//                             {/* <br></br> */}\r\n//                             <div className=\"mb-1\">\r\n//                                 Image <span className=\"font-css top\">*</span>\r\n//                                 <div>\r\n//                                     <input type=\"file\" name=\"image\" id=\"file-input\" onChange={handleImageChange} />\r\n//                                 </div>\r\n//                                 <br />\r\n\r\n//                                 {/* Kiểm tra nếu có ảnh thì hiển thị */}\r\n//                                 {imagePreview || editMovie?.image ? (\r\n//                                     <div className=\"mt-2 flex items-center gap-2\">\r\n//                                         <img\r\n//                                             src={imagePreview || `data:image/jpeg;base64,${editMovie.image}`}\r\n//                                             alt=\"Movie\"\r\n//                                             className=\"w-16 h-16 object-cover rounded-lg border\"\r\n//                                             style={{ width: \"100px\", height: \"100px\", objectFit: \"cover\", borderRadius: \"8px\" }}\r\n//                                         />\r\n//                                         {/* <button\r\n//                                             onClick={handleDeleteImage}\r\n//                                             className=\"bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600\"\r\n//                                         >\r\n//                                             Delete Image\r\n//                                         </button> */}\r\n//                                     </div>\r\n//                                 ) : null}\r\n//                             </div>\r\n\r\n//                         </Grid>\r\n\r\n\r\n//                     </Grid>\r\n\r\n\r\n//                 </DialogContent>\r\n//                 <DialogActions>\r\n//                     <Button onClick={handleCloseEdit2} color=\"primary\">\r\n//                         Cancel\r\n//                     </Button>\r\n//                     <Button color=\"primary\" variant=\"contained\" onClick={handleEditMovie}>\r\n//                         Update\r\n//                     </Button>\r\n//                 </DialogActions>\r\n//             </Dialog>\r\n//         </Box>\r\n//     )\r\n// }\r\n// const blue = {\r\n//     100: '#DAECFF',\r\n//     200: '#b6daff',\r\n//     400: '#3399FF',\r\n//     500: '#007FFF',\r\n//     600: '#0072E5',\r\n//     900: '#003A75',\r\n// };\r\n\r\n// const grey = {\r\n//     50: '#F3F6F9',\r\n//     100: '#E5EAF2',\r\n//     200: '#DAE2ED',\r\n//     300: '#C7D0DD',\r\n//     400: '#B0B8C4',\r\n//     500: '#9DA8B7',\r\n//     600: '#6B7A90',\r\n//     700: '#434D5B',\r\n//     800: '#303740',\r\n//     900: '#1C2025',\r\n// };\r\n\r\n// const TextareaAutosize = styled(BaseTextareaAutosize)(\r\n//     ({ theme }) => `\r\n//     box-sizing: border-box;\r\n//     width: 460px;\r\n//     font-family: 'IBM Plex Sans', sans-serif;\r\n//     font-size: 0.875rem;\r\n//     font-weight: 400;\r\n//     line-height: 1.5;\r\n//     padding: 8px 12px;\r\n//     border-radius: 8px;\r\n//     color: ${theme.palette.mode === 'dark' ? grey[300] : grey[900]};\r\n//     background: ${theme.palette.mode === 'dark' ? grey[900] : '#fff'};\r\n//     border: 1px solid ${theme.palette.mode === 'dark' ? grey[700] : grey[200]};\r\n//     box-shadow: 0 2px 2px ${theme.palette.mode === 'dark' ? grey[900] : grey[50]};\r\n  \r\n//     &:hover {\r\n//       border-color: ${blue[400]};\r\n//     }\r\n  \r\n//     &:focus {\r\n//       border-color: ${blue[400]};\r\n//       box-shadow: 0 0 0 3px ${theme.palette.mode === 'dark' ? blue[600] : blue[200]};\r\n//     }\r\n  \r\n//     /* firefox */\r\n//     &:focus-visible {\r\n//       outline: 0;\r\n//     }\r\n//   `,\r\n// );\r\n// export default TableMovie;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}